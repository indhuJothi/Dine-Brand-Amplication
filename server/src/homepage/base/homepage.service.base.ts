/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import { Prisma, Homepage, FreedomPay } from "@prisma/client";

export class HomepageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.HomepageFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.HomepageFindManyArgs>
  ): Promise<number> {
    return this.prisma.homepage.count(args);
  }

  async findMany<T extends Prisma.HomepageFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.HomepageFindManyArgs>
  ): Promise<Homepage[]> {
    return this.prisma.homepage.findMany(args);
  }
  async findOne<T extends Prisma.HomepageFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.HomepageFindUniqueArgs>
  ): Promise<Homepage | null> {
    return this.prisma.homepage.findUnique(args);
  }
  async create<T extends Prisma.HomepageCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.HomepageCreateArgs>
  ): Promise<Homepage> {
    return this.prisma.homepage.create<T>(args);
  }
  async update<T extends Prisma.HomepageUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.HomepageUpdateArgs>
  ): Promise<Homepage> {
    return this.prisma.homepage.update<T>(args);
  }
  async delete<T extends Prisma.HomepageDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.HomepageDeleteArgs>
  ): Promise<Homepage> {
    return this.prisma.homepage.delete(args);
  }

  async getFreedomPay(parentId: string): Promise<FreedomPay | null> {
    return this.prisma.homepage
      .findUnique({
        where: { id: parentId },
      })
      .freedomPay();
  }
}
